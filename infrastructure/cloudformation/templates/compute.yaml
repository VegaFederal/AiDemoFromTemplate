AWSTemplateFormatVersion: '2010-09-09'
Description: Compute resources for AI Demo

Parameters:
  ProjectName:
    Type: String
    Default: AiDemo
    Description: Name of the project

  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: The deployment environment
  
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: ID of the existing company VPC
  
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: List of existing subnet IDs for deployment
  
  WebsiteBucketName:
    Type: String
    Description: Name of the S3 bucket for website files
    
  ModelId:
    Type: String
    Default: amazon.nova-pro-v1:0
    Description: Amazon Bedrock model ID to use

Resources:
  # Lambda Function for the API
  AIFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          import os
          import re

          # Configure logging
          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          def lambda_handler(event, context):
              logger.info(f"Event: {json.dumps(event)}")
              
              # Handle OPTIONS requests for CORS
              if event.get('httpMethod') == 'OPTIONS':
                  return create_response(200)
              
              try:
                  # Check if this is a CloudFormation custom resource request
                  if 'RequestType' in event and 'PhysicalResourceId' in event:
                      logger.info("Handling CloudFormation custom resource request")
                      return {
                          'Status': 'SUCCESS',
                          'PhysicalResourceId': event.get('PhysicalResourceId'),
                          'StackId': event.get('StackId'),
                          'RequestId': event.get('RequestId'),
                          'LogicalResourceId': event.get('LogicalResourceId')
                      }
                  
                  # Parse the incoming request
                  if 'body' not in event or not event['body']:
                      raise ValueError("Missing or empty request body")
                  
                  # Handle both string and JSON body
                  body = event['body']
                  if isinstance(body, str):
                      try:
                          body = json.loads(body)
                      except json.JSONDecodeError:
                          raise ValueError("Invalid JSON in request body")
                  
                  prompt = body.get('prompt')
                  if not prompt:
                      raise ValueError("Missing 'prompt' in request body")
                  
                  # Get model ID from environment variable or use default
                  model_id = os.environ.get('MODEL_ID', 'amazon.nova-pro-v1:0')
                  logger.info(f"Using model: {model_id}")
                  
                  # Initialize Bedrock client using the current region
                  region = os.environ.get('AWS_REGION')
                  bedrock = boto3.client('bedrock-runtime', region_name=region)
                  
                  # Configure the request based on model type
                  if re.match(r'anthropic\.claude', model_id):
                      # Claude models use anthropic message format
                      request_body = {
                          "anthropic_version": "bedrock-2023-05-31",
                          "max_tokens": 1000,
                          "messages": [
                              {"role": "user", "content": [{"type": "text", "text": prompt}]}
                          ]
                      }
                  else:
                      # Default to Nova format
                      messages = [{"role": "user", "content": [{"text": prompt}]}]
                      request_body = {
                          "schemaVersion": "messages-v1",
                          "messages": messages
                      }
                  
                  # Call Bedrock with the prompt
                  logger.info(f"Sending request to Bedrock: {json.dumps(request_body)}")
                  response = bedrock.invoke_model(
                      modelId=model_id,
                      body=json.dumps(request_body)
                  )
                  
                  # Parse the response
                  response_body = json.loads(response['body'].read())
                  logger.info(f"Response received from Bedrock: {json.dumps(response_body)}")
                  
                  # Extract the generated text based on model type
                  if re.match(r'anthropic\.claude', model_id):
                      # Claude response format
                      content_items = response_body.get('content', [])
                      generated_text = ""
                      for item in content_items:
                          if item.get('type') == 'text':
                              generated_text += item.get('text', '')
                      if not generated_text:
                          generated_text = "No response text"
                  else:
                      # Nova response format
                      generated_text = response_body.get('output', {}).get('message', {}).get('content', [{}])[0].get('text', 'No response text')
                  
                  # Return the response
                  return create_response(200, {'response': generated_text})
              except ValueError as e:
                  logger.warning(f"Validation error: {str(e)}")
                  return create_response(400, {'error': str(e)})
              except Exception as e:
                  logger.error(f"Error: {str(e)}", exc_info=True)
                  return create_response(500, {'error': f'Internal server error: {str(e)}'})

          def create_response(status_code, body=None):
              """Create a standardized API Gateway response"""
              response = {
                  'statusCode': status_code,
                  'headers': {
                      'Access-Control-Allow-Origin': '*',
                      'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
                      'Access-Control-Allow-Methods': 'OPTIONS,POST',
                      'Content-Type': 'application/json'
                  }
              }
              
              if body is not None:
                  response['body'] = json.dumps(body)
              
              return response
      Description: AI Lambda handler for request response.
      FunctionName: !Sub "${ProjectName}-${Environment}-AIHandler"
      Handler: index.lambda_handler
      MemorySize: 256
      Role: !GetAtt LambdaRole.Arn
      Runtime: python3.11
      Timeout: 60
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds: !Ref SubnetIds
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          MODEL_ID: !Ref ModelId
          PROJECT_NAME: !Ref ProjectName
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-lambda"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  # IAM Role for the Lambda Function
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Policies:
        - PolicyName: LambdaBedrockPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: 
                  - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/${ModelId}"
                  - !Sub "arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:inference-profile/*"
                  - !Sub "arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-*"

        - PolicyName: LambdaS3Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::${WebsiteBucketName}/*"
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-lambda-role"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda function
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: Allow HTTPS outbound traffic
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-${Environment}-lambda-sg"
        - Key: Environment
          Value: !Ref Environment
        - Key: Project
          Value: !Ref ProjectName

Conditions:
  IsProd: !Equals [!Ref Environment, "prod"]

Outputs:
  LambdaFunctionArn:
    Description: "ARN of the Lambda function"
    Value: !GetAtt AIFunction.Arn
    Export:
      Name: !Sub "${ProjectName}-${Environment}-LambdaFunctionArn"