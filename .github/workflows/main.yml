name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  VPC_ID: vpc-05beac377794a8bd0  # Updated from project-config.json
  SUBNET_IDS: subnet-077c4af68ae8a1869  # Updated from project-config.json
  AWS_REGION: us-east-1
  STACK_NAME: AiDemo
  TEMPLATE_BUCKET: cdk-hnb659fds-assets-879961718230-us-east-1 
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up environment
        run: echo "Setting up test environment"
      - name: Run tests
        run: echo "Running tests"

  deploy:
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION || 'us-east-1'}}
      
      # Create or ensure the template bucket exists
      - name: Ensure template bucket exists
        run: |
          aws s3api head-bucket --bucket ${{ env.TEMPLATE_BUCKET }} 2>/dev/null || aws s3 mb s3://${{ env.TEMPLATE_BUCKET }}
      
      # Upload nested stack templates to S3
      - name: Upload nested stack templates
        run: |
          aws s3 sync infrastructure/cloudformation/templates/ s3://${{ env.TEMPLATE_BUCKET }}/templates/
      
      # Update template URLs in main.yaml
      - name: Update template URLs
        run: |
          sed -i "s|https://your-s3-bucket.s3.amazonaws.com|https://${{ env.TEMPLATE_BUCKET }}.s3.amazonaws.com|g" infrastructure/cloudformation/main.yaml
      
      # Fix WebsiteBucket reference in main.yaml
      - name: Fix WebsiteBucket reference
        run: |
          sed -i "s|Value: !Ref WebsiteBucket|Value: !GetAtt StorageStack.Outputs.WebsiteBucketName|g" infrastructure/cloudformation/main.yaml
      
      # Deploy the CloudFormation stack
      - name: Deploy CloudFormation stack
        uses: aws-actions/aws-cloudformation-github-deploy@v1
        with:
          name: ${{ env.STACK_NAME }}
          template: infrastructure/cloudformation/main.yaml
          parameter-overrides: >-
            Environment=dev,
            VpcId=${{ env.VPC_ID }},
            SubnetIds=${{ env.SUBNET_IDS }}
          no-fail-on-empty-changeset: "1"
          capabilities: "CAPABILITY_NAMED_IAM"
      
      # Get the S3 bucket name from CloudFormation outputs
      - name: Get S3 bucket name
        id: get-bucket
        run: |
          BUCKET_NAME=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='WebsiteBucketName'].OutputValue" --output text)
          echo "BUCKET_NAME=$BUCKET_NAME" >> $GITHUB_ENV
          echo "Bucket name: $BUCKET_NAME"
      
      # Upload website files to S3 bucket
      - name: Upload website files to S3
        run: |
          if [ -d "website" ]; then
            aws s3 sync website/ s3://$BUCKET_NAME/
          else
            echo "No website directory found. Creating a simple index.html"
            mkdir -p website
            echo "<html><body><h1>AI Demo</h1><p>Welcome to the AI Demo!</p></body></html>" > website/index.html
            aws s3 sync website/ s3://$BUCKET_NAME/
          fi
      
      # Get CloudFront URL
      - name: Get CloudFront URL
        run: |
          CF_URL=$(aws cloudformation describe-stacks --stack-name ${{ env.STACK_NAME }} --query "Stacks[0].Outputs[?OutputKey=='WebsiteUrl'].OutputValue" --output text)
          echo "Your website is available at: https://$CF_URL"
